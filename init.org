# Literate programming: Orgmode Init.el

What it says on the tin, of course. We're going to start large and break it down.

#+begin_src emacs-lisp
(require 'package)
(require 'use-package-ensure)
(setq use-package-always-ensure t)

;;(add-to-list 'package-archives
;;             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

;; Melpa Stable only for now, but if we want to use unstable we have
;; it available:
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

;; Allegedly this will no longer be required in Emacs 30, but that's
;; not the case quite yet?
(use-package exec-path-from-shell
  :init (exec-path-from-shell-initialize))
;; install.el
(use-package auto-complete)
(use-package dockerfile-mode)
(use-package editorconfig)
(use-package kubernetes)
(use-package magit)
(use-package editorconfig)
(use-package scratch)
(use-package terraform-mode)
(use-package typescript-mode)
(use-package yaml-mode)
;; helpers.el
;;
;; Switch between Solarized Light and Dark
;;
(defun toggle-solarized ()
  "Toggles between solarized light and dark."
  (interactive)
  (if (eq (frame-parameter (next-frame) 'background-mode) 'dark)
      (load-theme 'solarized-light)
    (load-theme 'solarized-dark)))
;;
;; Auto-indent on Paste
;;
(dolist (command '(yank yank-pop))
  (eval `(defadvice ,command (after indent-region activate)
           (and (not current-prefix-arg)
                (member major-mode '(emacs-lisp-mode lisp-mode
                                                     clojure-mode    scheme-mode
                                                     haskell-mode    ruby-mode
                                                     rspec-mode      python-mode
                                                     c-mode          c++-mode
                                                     objc-mode       latex-mode
                                                     plain-tex-mode))
                (let ((mark-even-if-inactive transient-mark-mode))
                  (indent-region (region-beginning) (region-end) nil))))))
;;
;; Move lines
;; - from http://www.emacswiki.org/emacs/MoveLine
;;
(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    ;; restore point to original column in moved line
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)
;;
;; Duplicate Line
;;
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (newline)
  (yank))
;;
;; Align Equal Signs
;; corrected form from:
;;   http://stackoverflow.com/questions/3633120/emacs-hotkey-to-align-equal-signs
;;
(defun align-equal-signs (begin end)
  "Align region to equal signs"
  (interactive "r")
  (align-regexp begin end "\\(\\s-*\\)=" 1 1 ))
;;
;; Yank Pop Forwards
;;
(defun yank-pop-forwards (arg)
  (interactive "p")
  (yank-pop (- arg)))
;;
;; Window Switching
;;
(defun other-window-reverse ()
  "Switch to the previous window"
  (interactive)
  (other-window -1))
;;
;; Window Re-sizing
;;
(defun enlarge-window-down  () (interactive) (enlarge-window 1))
(defun enlarge-window-up    () (interactive) (enlarge-window -1))
(defun enlarge-window-left  () (interactive) (enlarge-window -1 t))
(defun enlarge-window-right () (interactive) (enlarge-window 1 t))
;;
;; This makes M-q aka ~fill-paragraph~ be a toggle; source
;; https://endlessparentheses.com/fill-and-unfill-paragraphs-with-a-single-key.html
;;
(defun endless/fill-or-unfill ()
  "Like `fill-paragraph', but unfill if used twice."
  (interactive)
  (let ((fill-column
         (if (eq last-command 'endless/fill-or-unfill)
             (progn (setq this-command nil)
                    (point-max))
           fill-column)))
    (call-interactively #'fill-paragraph)))

(global-set-key [remap fill-paragraph]
                #'endless/fill-or-unfill)
;;
;; Window Swapping
;; - from https://gist.github.com/287633
;;
(defun swap-with (dir)
  (interactive)
  (let ((other-window (windmove-find-other-window dir)))
    (when other-window
      (let* ((this-window  (selected-window))
             (this-buffer  (window-buffer this-window))
             (other-buffer (window-buffer other-window))
             (this-start   (window-start this-window))
             (other-start  (window-start other-window)))
        (set-window-buffer this-window  other-buffer)
        (set-window-buffer other-window this-buffer)
        (set-window-start  this-window  other-start)
        (set-window-start  other-window this-start)))))

(defun swap-with-down  () (interactive) (swap-with 'down))
(defun swap-with-up    () (interactive) (swap-with 'up))
(defun swap-with-left  () (interactive) (swap-with 'left))
(defun swap-with-right () (interactive) (swap-with 'right))
;;
;; From Jim Weirich; Thanks Jim!
;; https://github.com/jimweirich/emacs-setup-esk
;;
(defconst jw-eval-buffer-commands
  '(("js" . "/usr/local/bin/node")
    ("rb" . "/Users/jtimberman/.rbenv/shims/ruby")
    ("coffee" . "/usr/local/bin/coffee")
    ("clj" . "/Users/jim/local/bin/clojure")))

(defconst jw-eval-buffer-name "*EVALBUFFER*")

(defun jw-eval-buffer ()
  "Evaluate the current buffer and display the result in a buffer."
  (interactive)
  (save-buffer)
  (let* ((file-name (buffer-file-name (current-buffer)))
         (file-extension (file-name-extension file-name))
         (buffer-eval-command-pair (assoc file-extension jw-eval-buffer-commands)))
    (if buffer-eval-command-pair
        (let ((command (concat (cdr buffer-eval-command-pair) " " file-name)))
          (shell-command-on-region (point-min) (point-max) command jw-eval-buffer-name nil)
          (pop-to-buffer jw-eval-buffer-name)
          (other-window 1)
          (jw-eval-buffer-pretty-up-errors jw-eval-buffer-name)
          (message ".."))
      (message "Unknown buffer type"))))

(defun jw-eval-buffer-pretty-up-errors (buffer)
  "Fix up the buffer to highlight the error message (if it contains one)."
  (save-excursion
    (set-buffer buffer)
    (goto-char (point-min))
    (let ((pos (search-forward-regexp "\\.rb:[0-9]+:\\(in.+:\\)? +" (point-max) t)))
      (if pos (progn
                (goto-char pos)
                (insert-string "\n\n")
                (end-of-line)
                (insert-string "\n"))))))

(defun jw-clear-eval-buffer ()
  (interactive)
  (save-excursion
    (set-buffer jw-eval-buffer-name)
    (kill-region (point-min) (point-max))))

(defun jw-eval-or-clear-buffer (n)
  (interactive "P")
  (cond ((null n) (jw-eval-buffer))
        (t (jw-clear-eval-buffer)))  )
;; end helpers

;; keybindings.el
;; Define keybindings by default that are not associated with any
;; specific modes, modules, or packages. Customizations and bindings
;; for such will be wherever those are installed.
;;
;; Some keybindings here are for functions defined within this
;; configuration, however!
;;
;; http://www.emacswiki.org/emacs/AutoIndentation works in most modes
(define-key global-map (kbd "RET") 'newline-and-indent)

;; Let's not make assumptions on macOS about modifier keys
(when (eq system-type 'darwin)
  (setq
   mac-command-modifier 'super
   mac-option-modifier 'meta
   mac-control-modifier 'control
   mac-function-modifier 'hyper))

(keymap-global-set "C-c C-c M-x" 'execute-extended-command)
(keymap-global-set "C-x C-k" 'kill-buffer)
(keymap-global-set "M-Y" 'yank-pop-forwards)
(keymap-global-set "C-M-=" 'align-equal-signs)
(keymap-global-set "C-M-h" 'backward-kill-word)
(keymap-global-set "C-c u" 'move-line-up)
(keymap-global-set "C-c d" 'move-line-down)
(keymap-global-set "C-c C-j" 'join-line)
(keymap-global-set "C-c w" 'delete-trailing-whitespace)
(keymap-global-set "C-c t" 'insert-time-string)
(keymap-global-set "C-c f" 'find-file-in-project)
(keymap-global-set "C-c F" 'find-grep-dired)
(keymap-global-set "C-c r" 'revert-buffer)
(keymap-global-set "C-c l"
                   (lambda ()
                     (interactive)
                     (toggle-solarized)
                     (set-cursor-color "darkorange")))

;; Command-up, down, left, and right behave like other parts of macOS
(keymap-global-set "s-<up>" 'beginning-of-buffer)
(keymap-global-set "s-<down>" 'end-of-buffer)
(keymap-global-set "s-<left>" 'beginning-of-line)
(keymap-global-set "s-<right>" 'end-of-line)

;; Page up and page down work like we expect. Why is up down and down
;; up? Because macOS.
(keymap-global-set "H-<up>" 'scroll-down)
(keymap-global-set "H-<down>" 'scroll-up)

(keymap-global-set "s-a" 'mark-whole-buffer)
(keymap-global-set "s-v" 'yank)
(keymap-global-set "s-c" 'kill-ring-save)
(keymap-global-set "s-s" 'save-buffer)
(keymap-global-set "s-l" 'goto-line)
(keymap-global-set "s-w" 'delete-frame)
(keymap-global-set "s-n" 'make-frame)
(keymap-global-set "s-z" 'undo)
;; end keybindings

(defun load-dir (dir)
  (add-to-list 'load-path dir)
  (mapc 'load (directory-files dir nil "^[^#].*el$")))

;; insert time string (vendored)
;;; -*- coding: utf-8; -*-
;;; insert-time-string.el --- Insert the current time.

;; Copyright Â© 2010 Kevin Rodgers

;; Author: Kevin Rodgers <kevin.d.rodgers@gmail.com>
;; Created: 25 February 2010
;; Version: $Revision: 1.5 $
;; Keywords: time, date, convenience
;; RCS $Id: insert-time-string.el,v 1.5 2010/02/26 07:46:35 kevin Exp $

;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; Usage:
;; M-x insert-time-string
;; C-u M-x insert-time-string

;; Customizations:

;; Key binding: (global-set-key (kbd "C-c t") 'insert-time-string)

;; Date/Time format:
;;  (setq insert-time-string-format-alist
;;       (cons '("pseudo-iso" . "%Y-%m-%d %T") insert-time-string-format-alist))

;; VoilÃ !
;; C-c t pseudo-iso RET

;; If that's too much typing:
;; (setq insert-time-string-default-format "pseudo-iso")
;; C-c t RET

;;; Code:

(defvar insert-time-string-format-alist
  '(("iso-8601-date" . "%Y-%m-%d")
    ("iso-8601-time" . "%T%z")
    ("iso-8601" . "%Y-%m-%dT%T%z")
    ("locale-date" . "%x")
    ("locale-time" . "%X")
    ("locale" . "%c")
    ("locale-alternative-date" . "%Ex")
    ("locale-alternative-time" . "%EX")
    ("locale-alternative" . "%Ec"))
  "Alist of (NAME . FORMAT-STRING) elements.
See `format-time-string' for FORMAT-STRING.")

(defvar insert-time-string-default-format "locale")

(defun insert-time-string (format-string &optional time universal)
  "Insert the current time at point, according to FORMAT-STRING.
By default, insert the local time; with a prefix arg, insert the Universal Time.
See `format-time-string' for FORMAT-STRING, TIME, and UNIVERSAL arguments."
  (interactive
   (list (cdr (assoc (completing-read (format "Format (%s): "
					      insert-time-string-default-format)
				      insert-time-string-format-alist
				      nil t nil nil
				      insert-time-string-default-format)
		     insert-time-string-format-alist))
	 (current-time)
	 current-prefix-arg))
  (insert (format-time-string format-string time universal)))

;;; insert-time-string.el ends here

;; end insert time string (vendored)

(load-dir (concat user-emacs-directory "modules/"))
;; modules
(use-package json-mode
  :defer t)
(use-package json-reformat)

(setq auto-mode-alist (cons '("\\.json" . json-mode) auto-mode-alist))

(use-package markdown-mode
  :hook (visual-line-mode))

(setq auto-mode-alist (cons '("\\.md" . gfm-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.markdown" . gfm-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.mkd" . gfm-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.text" . gfm-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.txt" . gfm-mode) auto-mode-alist))

(remove-hook 'text-mode-hook 'turn-on-auto-fill) ;; auto-fill-mode, just say no

;; https://github.com/eki3z/mise.el
(use-package mise
  :defer t
  :config (global-mise-mode))

(setq org-directory "~/Documents/org")
(setq org-mobile-inbox-for-pull "~/Documents/org/flagged.org")
(setq org-mobile-directory "~/CloudDocs/MobileOrg")

(use-package org
  :mode (("\\.org$" . org-mode))
  :hook (visual-line-mode)
  :config
  (setq org-edit-src-content-indentation 0)
  (setq org-indent-mode t)
  (setq org-src-fontify-natively t)
  (setq org-startup-folded t)
  (setq org-startup-truncated nil))

;; export an org mode file as a presentation using Reveal.js
(use-package ox-reveal)
(setq org-export-with-broken-links 'mark)

(remove-hook 'org-mode-hook 'electric-indent-mode)

(org-babel-do-load-languages 'org-babel-load-languages
                             (append org-babel-load-languages
                                     '((python . t)
                                       (ruby . t)
                                       (perl . t)
                                       )))


(use-package enh-ruby-mode
  :defer t)
(use-package inf-ruby)

(add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
(add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("\\.knife$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Berksfile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Capfile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Cheffile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Collanderfile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Gemfile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Guardfile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Kitchenfile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Procfile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Rantfile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Thorfile$" . enh-ruby-mode))
(add-to-list 'auto-mode-alist '("Vagrantfile$" . enh-ruby-mode))

(add-hook 'enh-ruby-mode
          (lambda () (auto-fill-mode -1)))

(use-package rust-mode
  :defer t
  :hook (rustfmt-enable-on-save . cargo-minor-mode)
  :bind ("C-c C-f" . fustfmt-format-buffer))

(use-package cargo-mode)

(add-to-list 'auto-mode-alist '("\*\\.zsh$" . sh-mode))
(add-to-list 'auto-mode-alist '("\\.zshrc" . sh-mode))

(add-hook 'sh-mode-hook
          (lambda ()
            (auto-fill-mode -1)
            (setq tab-width 4)))

(setq sh-basic-offset 2)

(use-package ssh-config-mode
  :vc (:url "https://github.com/peterhoeg/ssh-config-mode-el.git"
            :rev :newest)
  :hook ssh-config-mode
  :config (turn-on-font-lock t))

(add-to-list 'auto-mode-alist '("/\\.ssh/config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode))
(add-to-list 'auto-mode-alist '("/sshd?_config\\(\\.d/.*\\.conf\\)?\\'"  . ssh-config-mode))
(add-to-list 'auto-mode-alist '("/known_hosts\\'"       . ssh-known-hosts-mode))
(add-to-list 'auto-mode-alist '("/authorized_keys2?\\'" . ssh-authorized-keys-mode))

(use-package vterm
  :bind ("C-c v" . vterm)
  :commands (vterm)
  :config
  (setq vterm-max-scrollback 100000)
  :hook ((vterm-mode . (lambda() display-line-numbers-mode 0))
         (vterm-mode . (lambda() (setq show-trailing-whitespace nil)))))

;; end modules
;; (load-file (concat user-emacs-directory "behavior.el"))
;;
;; This configuration defines various aspects of editor and user behavior
;;
;; (electric-pair-mode)
;; enable paredit
(setq-default tab-width 2)
(setq standard-indent 2)
(setq-default indent-tabs-mode nil)
(fset 'yes-or-no-p 'y-or-n-p)
(setq ring-bell-function 'ignore)

;; Backup directory
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; Don't echo passwords
(add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)

(setq insert-time-string-default-format "iso-8601-date")
(server-start) ;; Start Emacs server

;; wrap-region
(use-package wrap-region
  :config
  (wrap-region-global-mode t)
  (wrap-region-add-wrapper "`" "`"))

(setq x-select-enable-clipboard t)

(use-package toggle-quotes
  :bind ("C-'" . toggle-quotes))

;;
;; Inspired by https://protesilaos.com/codelog/2024-02-17-emacs-modern-minibuffer-packages/
;; Replaces previous use of ivy, counsel, etc.
;;
(use-package vertico
  :init
  (vertico-mode)
  :config
  (setq vertico-cycle t)
  (setq vertico-resize nil))

(use-package marginalia
  :after vertico
  :init
  (marginalia-mode))

(use-package orderless
  :config
  (setq completion-styles '(orderless)))

(use-package consult
  :ensure t
  :bind (;; A recursive grep
         ("M-s M-g" . consult-grep)
         ;; Search for files names recursively
         ("M-s M-f" . consult-find)
         ;; Search through the outline (headings) of the file
         ("M-s M-o" . consult-outline)
         ;; Search the current buffer
         ("M-s M-l" . consult-line)
         ;; Switch to another buffer, or bookmarked file, or recently
         ;; opened file.
         ("M-s M-b" . consult-buffer)))

(which-key-mode 1)
(which-key-setup-side-window-right-bottom)

;; https://github.com/Alexander-Miller/treemacs
(use-package treemacs
  :bind (("M-0" . treemacs-select-window)
         ("M-o" . ace-window)
         ("s-," . treemacs)))

(use-package treemacs-projectile)
(use-package treemacs-magit)

(use-package dired-preview
  :hook (after-init . dired-preview-global-mode))

;; Use ripgrep for rgrep
(grep-apply-setting 'grep-template "rg --no-heading -H -uu -g <F> <R> <D>")

;; end behavior
;; (load-file (concat user-emacs-directory "appearance.el"))
;;
;; This configuration defines the look and feel of the editor
;;
(tooltip-mode -1)
(menu-bar-mode 0)
(tool-bar-mode -1)
(show-paren-mode 1)
(blink-cursor-mode 0)
(column-number-mode t)
(global-hl-line-mode 1)
(setq create-lockfiles nil)
(setq inhibit-startup-message t)
(setq-default frame-title-format "%b (%f)")

;; Turn on line numbers everywhere, except...
(global-display-line-numbers-mode 1)
(dolist (mode '(term-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda() (display-line-numbers-mode 0))))

;; Set default font
(setq my-font (cond ((window-system) "BlexMono Nerd Font")
                    ("Monospace")))
(set-face-attribute 'default nil :family my-font :height 160)
(set-frame-font (concat my-font "-16"))

;; Configure a nice modeline with doom
;; https://github.com/doomemacs/doomemacs/issues/724
;; M-x all-the-icons-install-fonts
;; M-x nerd-icons-install-fonts
;; (use-package all-the-icons)
(use-package doom-modeline
  :init (doom-modeline-mode 1))

;; (use-package solarized-theme
;;   :config
;;   (load-theme 'solarized-light t)
;;   (setq solarized-use-variable-pitch nil)
;;   (setq solarized-scale-org-headlines nil))

;; (set-cursor-color "darkorange")
;; (set-face-attribute 'cursor nil :background "darkorange")
;; themes I like:
;; dark
;;  ef-bio
;;  ef-owl
;; light
;;  ef-melissa-light
;;  ef-elea-light
;;
(use-package ef-themes
  :config
  (load-theme 'ef-elea-light t))

(defun my-ef-themes-mode-line ()
  "Tweak the style of the mode lines."
  (ef-themes-with-colors
    (custom-set-faces
     `(mode-line ((,c :background ,bg-mode-line :foreground ,fg-mode-line :box (:line-width 1 :color ,fg-dim))))
     `(mode-line-inactive ((,c :box (:line-width 1 :color ,bg-active)))))))

(add-hook 'ef-themes-post-load-hook #'my-ef-themes-mode-line)

;; manage trailing whitespace settings:
(setq-default show-trailing-whitespace t)

(remove-hook 'before-save-hook 'delete-trailing-whitespace)

(dolist (hook '(special-mode-hook
                term-mode-hook
                comint-mode-hook
                compilation-mode-hook
                minibuffer-setup-hook))
  (add-hook hook
            (lambda () (setq show-trailing-whitespace nil))))
;; end appearance
;;
;;
(defvar work-config (concat user-emacs-directory "work.el"))
(when (file-exists-p work-config)
  (load-file work-config))

;; Do some Kill This With Fire nonsense.
;; Custom variables file
(setq custom-file "~/.emacs.d/custom.el")
(load-file custom-file)

(setq initial-major-mode 'org-mode)
#+end_src
